package com.example.liu.ad_detection;

import android.animation.*;
import android.content.Intent;
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import com.example.liu.ad_detection.http.HTTPHandler;

import java.io.IOException;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegisterActivity extends AppCompatActivity implements View.OnClickListener {

    private TextView Register;
    private View progress;
    private View mInputLayout;
    private EditText mNameView;
    private EditText mPassView;
    private EditText mPassView2;
    private float mWidth, mHeight;
    private LinearLayout mName, mPsw, mPsw2;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.activity_register);
        initView();
    }

    private void initView() {
        Register = (TextView) findViewById(R.id.main_btn_register);
        progress = findViewById(R.id.layout_register_progress);
        mInputLayout = findViewById(R.id.input_register_layout);
        mName = (LinearLayout) findViewById(R.id.input_register_layout_name);
        mPsw = (LinearLayout) findViewById(R.id.input_register_layout_psw1);
        mPsw2 = (LinearLayout) findViewById(R.id.input_register_layout_psw2);
        mNameView = (EditText) findViewById(R.id.username_register);
        mPassView = (EditText) findViewById(R.id.password1_register);
        mPassView2 = (EditText) findViewById(R.id.password2_register);
        Register.setOnClickListener(this);
    }

    //检测用户名密码规范：
    //用户名和密码必须为数字或字母
    //用户名和密码长度大于6小于20
    private boolean check_information(String username,String password){
        String regEx = "^[a-zA-z0-9]{6,20}$";
        // 编译正则表达式
        Pattern pattern = Pattern.compile(regEx);
        Matcher matcher_username = pattern.matcher(username);
        Matcher matcher_pass = pattern.matcher(password);
        // 字符串是否与正则表达式相匹配
        boolean rs1 = matcher_username.matches();
        boolean rs2 = matcher_pass.matches();
        return rs1 && rs2;
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.main_btn_register:
                judge_register();
                // 计算出控件的高与宽
                Log.d("Register", "button");
                break;
        }
    }

    private void judge_register() {

        // Reset errors.
        mNameView.setError(null);
        mPassView.setError(null);

        // Store values at the time of the login attempt.
        String username = mNameView.getText().toString();
        String password = mPassView.getText().toString();
        String password2 = mPassView2.getText().toString();

        boolean cancel = false;
        View focusView = null;

        // Check for a valid password, if the user entered one.
        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {
            mPassView.setError(getString(R.string.error_invalid_password));
            focusView = mPassView;
            cancel = true;
        }

        if (!TextUtils.isEmpty(password2) && !isPasswordValid(password2)) {
            mPassView2.setError(getString(R.string.error_invalid_password));
            focusView = mPassView2;
            cancel = true;
        }

        // Check for a valid email address.
        if (TextUtils.isEmpty(username)) {
            mNameView.setError(getString(R.string.error_field_required));
            focusView = mNameView;
            cancel = true;
        }

        //检查两次输入的密码是否相同
        if (!password.equals(password2)) {
            mPassView2.setError("两次输入密码不一致，请重新输入");
            focusView = mPassView2;
            cancel = true;
        }

        if (cancel) {
            focusView.requestFocus();
        } else {
            POST post = new POST(username,password);
            Thread thread = new Thread(post);
            thread.start();
            while (true){
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                if (post.flag){
                    Log.d("POST",post.responseMessage);
                    break;
                }
            }
        }
    }

    private boolean isPasswordValid(String password) {
        //TODO: Replace this with your own logic
        return password.length() > 4;
    }



    class POST implements Runnable{

        private String username;
        private String password;
        public String responseMessage;
        public boolean flag = false;
        public HTTPHandler httpHandler;

        POST(String username, String password) {
            this.password = password;
            this.username = username;
        }

        @Override
        public void run() {
            Socket socket = null;
            try {
                socket = new Socket("192.168.43.233",12345);
            } catch (IOException e) {
                e.printStackTrace();
            }

            HTTPHandler request = new HTTPHandler();
            request.setObject(HTTPHandler.object.MESSAGE);
            request.setMethod(HTTPHandler.method.REGISTER);
            HashMap<String,String> POST = new HashMap<>();
            POST.put("username",username);
            POST.put("password",password);
            request.addPOST(POST);
            try {
                Log.d("POST","start");
                HTTPHandler response = HTTPHandler.sendRequestAndReadReponse(socket,request);
                Log.d("POST",response.getStatusCode());
                responseMessage = new String(response.getContent());
                flag = true;
                this.httpHandler = request;
                if (socket != null) {
                    socket.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
