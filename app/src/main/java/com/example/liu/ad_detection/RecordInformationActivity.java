package com.example.liu.ad_detection;

import adstatic.tools.Deserialize;
import adstatic.tools.VulnRetu;
import adstatic.tools.VulnRetuHub;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.*;
import com.example.liu.ad_detection.model.AppInfo;
import com.example.liu.ad_detection.model.ListViewForScrollView;
import com.google.gson.Gson;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.*;

public class RecordInformationActivity extends AppCompatActivity {

    private ExpandableListView listView;            //可以展示下拉详情的listview
    private ListView privacyListView;
    private HashMap<String, HashMap<String, LinkedList<VulnRetu>>> vulnMap = new HashMap<>();    //漏洞列表
    private ExpandableListViewAdapter adapter;
    private ResultAdapter adapterPrivacy;
    private TextView mainResult;
    private TextView vulnNumber;
    private TextView privacyNumber;
    private TextView fileName;
    private TextView fileMD5;
    private TextView detectTime;
    private Button exitButton;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_record_information);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        initView();
    }

    private void initView() {
        mainResult = (TextView)findViewById(R.id.main_result);
        vulnNumber = (TextView)findViewById(R.id.vuln_number);
        vulnNumber.setTextColor(0xffff0000);
        privacyNumber = (TextView)findViewById(R.id.privacy_number);
        privacyNumber.setTextColor(0xffff0000);
        fileName = (TextView)findViewById(R.id.file_name);
        fileMD5 = (TextView)findViewById(R.id.file_MD5);
        detectTime = (TextView)findViewById(R.id.detect_time);
        exitButton = (Button)findViewById(R.id.back_result);
        exitButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });

        Intent intent=getIntent();
        String appLabel = intent.getStringExtra("result_appLabel");
        String pkgName = intent.getStringExtra("result_pkgName");
        String hash = intent.getStringExtra("result_hash");
        String time = intent.getStringExtra("result_time");
        String message = intent.getStringExtra("result_message");
        AppInfo appInfo = new AppInfo(appLabel,pkgName,hash,time,message);
        Gson gson = new Gson();
        Map<String, String> map = new HashMap<>();
        map = gson.fromJson(appInfo.getMessage(), map.getClass());
        System.out.println(map.get("classify"));
//        for (Map.Entry<String, String> entry:map.entrySet()){
//            Log.d("INFO",entry.getKey());
//            Log.d("INFO",entry.getValue());
//        }
        String main_result = map.get("classify");       //展示检测结果
        if (main_result.indexOf("1")>0){
            mainResult.setTextColor(0xff33ff00);
            mainResult.setText("正常");
        }else {
            mainResult.setTextColor(0xffff0000);
            mainResult.setText("恶意");
        }

        //展示漏洞详情与隐私详情
        byte[] vuln = android.util.Base64.decode(map.get("vuln"),android.util.Base64.DEFAULT);
        byte[] privacy = android.util.Base64.decode(map.get("privacy"),android.util.Base64.DEFAULT);
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(vuln);
        ByteArrayInputStream privacy_inputStream = new ByteArrayInputStream(privacy);
        ObjectInputStream oisVuln = null;
        ObjectInputStream oisPrivacy = null;
        LinkedList<String> privacyList = null;
        try {
            oisVuln = new ObjectInputStream(byteArrayInputStream);      //执行反序列化
            oisPrivacy = new ObjectInputStream(privacy_inputStream);
            privacyList = (LinkedList<String>) oisPrivacy.readObject();
            VulnRetuHub vulnRetuHub = (VulnRetuHub) oisVuln.readObject();
            vulnMap = vulnRetuHub.vulnMap;
        } catch (Exception e) {
            System.out.println("抛出异常");
            e.printStackTrace();
        }
        int count = countVuln(vulnMap);
        System.out.println(count);
        vulnNumber.setText(String.valueOf(count));
        privacyNumber.setText(String.valueOf(privacyList.size()));
        fileName.setText(appInfo.getAppLabel());
        fileMD5.setText(appInfo.getHash());
        detectTime.setText(appInfo.getTime());
        listView = (ExpandableListView) findViewById(R.id.expandablelistview);
        adapter = new ExpandableListViewAdapter();
        listView.setAdapter(adapter);
        privacyListView = (ListView) findViewById(R.id.privacy_listview);
        adapterPrivacy = new ResultAdapter(getApplicationContext(),privacyList);
        privacyListView.setAdapter(adapterPrivacy);
    }

    private int countVuln(HashMap<String, HashMap<String, LinkedList<VulnRetu>>> vulnMap) {
        int count = 0;
        for(Map.Entry<String,HashMap<String, LinkedList<VulnRetu>>> mapEntry:vulnMap.entrySet()){
            for(Map.Entry<String,LinkedList<VulnRetu>> mapEntry2:mapEntry.getValue().entrySet()){
                count += mapEntry2.getValue().size();
            }
        }
        return count;
    }

    class ResultAdapter extends BaseAdapter {

        private LinkedList<String> resultList = null;

        LayoutInflater infater = null;

        ResultAdapter(Context context, LinkedList<String> apps) {
            infater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            resultList = apps;
        }

        @Override
        public int getCount() {
            return resultList.size();
        }

        @Override
        public Object getItem(int position) {
            return resultList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            View view = null;
            if (convertView == null || convertView.getTag() == null) {
                view = infater.inflate(R.layout.privacy_item,parent,false);
            }
            else{
                view = convertView;
            }
            TextView textView = view.findViewById(R.id.privacy_view);
            textView.setText(resultList.get(position));
            return view;
        }
    }

    //负责处理高危漏洞的可以显示下拉详情的listview
    private class ExpandableListViewAdapter extends BaseExpandableListAdapter {

        private ArrayList mData;

        public ExpandableListViewAdapter() {
            mData = new ArrayList();
            mData.addAll(vulnMap.entrySet());
        }

        //  获得父项显示的view
        @Override
        public View getGroupView(int parentPos, boolean b, View view, ViewGroup viewGroup) {
            if (view == null) {
                LayoutInflater inflater = (LayoutInflater) RecordInformationActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                view = inflater.inflate(R.layout.parent_item, null);
            }
            view.setTag(R.layout.parent_item, parentPos);
            view.setTag(R.layout.child_item, -1);
            Map.Entry<String, Map<String,LinkedList<VulnRetu>>> item = getGroup(parentPos);
            TextView text = (TextView) view.findViewById(R.id.parent_title);
            text.setText(item.getKey());
            boolean judge = true;
            for (Map.Entry<String,LinkedList<VulnRetu>> map:item.getValue().entrySet()) {
                //Log.d("map_size", String.valueOf(map.getValue().size()));
                if (map.getValue().size() != 0){
                    judge = false;
                    break;
                }
            }
            //Log.d("map_judge", String.valueOf(judge));
            TextView text_result = (TextView) view.findViewById(R.id.parent_result);
            if (judge){
                text_result.setTextColor(0xff33ff00);
                text_result.setText("安全");
            }else {
                text_result.setTextColor(0xffff0000);
                text_result.setText("高危");
            }
            return view;
        }

        //  获得子项显示的view
        @Override
        public View getChildView(int parentPos, int childPos, boolean b, View view, ViewGroup viewGroup) {
            if (view == null) {
                LayoutInflater inflater = (LayoutInflater) RecordInformationActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                view = inflater.inflate(R.layout.child_item, null);
            }
            view.setTag(R.layout.parent_item, parentPos);
            view.setTag(R.layout.child_item, childPos);
            TextView text_title = (TextView) view.findViewById(R.id.child_title);
            TextView text_information = (TextView) view.findViewById(R.id.child_information);
            Map.Entry<String,LinkedList<VulnRetu>> child_item = getChild(parentPos,childPos);
            if (child_item.getValue().size() == 0){
                text_title.setVisibility(View.GONE);
                text_information.setVisibility(View.GONE);
            }else {
                text_title.setVisibility(View.VISIBLE);
                text_information.setVisibility(View.VISIBLE);
                text_title.setText("漏洞详情："+child_item.getKey());
                StringBuilder stringBuilder = new StringBuilder();
                for (VulnRetu v:child_item.getValue()) {
                    stringBuilder.append(v.getStmtInfos()).append("\n");
                }
                text_information.setText(stringBuilder.toString());
                text_title.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Toast.makeText(RecordInformationActivity.this, "点到了内置的textview", Toast.LENGTH_SHORT).show();
                    }
                });
            }
            return view;
        }

        @Override   //  获得某个父项的某个子项
        public Map.Entry<String,LinkedList<VulnRetu>> getChild(int parentPos, int childPos) {
            ArrayList list = new ArrayList();
            Map.Entry<String, Map<String,LinkedList<VulnRetu>>> item = getGroup(parentPos);
            list.addAll(item.getValue().entrySet());
//            Log.d("getChildrenCount", String.valueOf(list.size()));
            return (Map.Entry<String, LinkedList<VulnRetu>>) list.get(childPos);
        }

        @Override   //  获得父项的数量
        public int getGroupCount() {
            return mData.size();
        }

        @Override   //  获得某个父项的子项数目
        public int getChildrenCount(int parentPos) {
            ArrayList list = new ArrayList();
            Map.Entry<String, Map<String,LinkedList<VulnRetu>>> item = getGroup(parentPos);
            list.addAll(item.getValue().entrySet());
//            Log.d("getChildrenCount", String.valueOf(list.size()));
            return list.size();
        }

        @Override   //  获得某个父项
        public Map.Entry<String, Map<String,LinkedList<VulnRetu>>> getGroup(int parentPos) {
            return (Map.Entry) mData.get(parentPos);
        }

        @Override   //  获得某个父项的id
        public long getGroupId(int parentPos) {
            return parentPos;
        }

        @Override   //  获得某个父项的某个子项的id
        public long getChildId(int parentPos, int childPos) {
            return childPos;
        }

        @Override   //  按函数的名字来理解应该是是否具有稳定的id，这个方法目前一直都是返回false，没有去改动过
        public boolean hasStableIds() {
            return false;
        }

        @Override   //  子项是否可选中，如果需要设置子项的点击事件，需要返回true
        public boolean isChildSelectable(int i, int i1) {
            return false;
        }
    }
}
