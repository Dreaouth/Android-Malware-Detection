package com.example.liu.ad_detection;

import adstatic.tools.Deserialize;
import adstatic.tools.VulnRetu;
import adstatic.tools.VulnRetuHub;
import android.content.Context;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.TextView;
import android.widget.Toast;

import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.util.*;

public class RecordInformationActivity extends AppCompatActivity {

    private ExpandableListView listView;            //可以展示下拉1详情的listview
    private HashMap<String, HashMap<String, LinkedList<VulnRetu>>> vulnMap = new HashMap<>();    //漏洞列表
    private ExpandableListViewAdapter adapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        try {
            vulnMap = Deserialize.DeserializeToVulnRetuHub("123").vulnMap;
        } catch (Exception e) {
            e.printStackTrace();
        }
        setContentView(R.layout.activity_record_information);
        listView = (ExpandableListView) findViewById(R.id.expandablelistview);
        adapter = new ExpandableListViewAdapter();
        listView.setAdapter(adapter);
    }

    private class ExpandableListViewAdapter extends BaseExpandableListAdapter {

        private ArrayList mData;

        public ExpandableListViewAdapter() {
            mData = new ArrayList();
            mData.addAll(vulnMap.entrySet());
        }

        //  获得父项显示的view
        @Override
        public View getGroupView(int parentPos, boolean b, View view, ViewGroup viewGroup) {
            if (view == null) {
                LayoutInflater inflater = (LayoutInflater) RecordInformationActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                view = inflater.inflate(R.layout.parent_item, null);
            }
            view.setTag(R.layout.parent_item, parentPos);
            view.setTag(R.layout.child_item, -1);
            Map.Entry<String, Map<String,LinkedList<VulnRetu>>> item = getGroup(parentPos);
            TextView text = (TextView) view.findViewById(R.id.parent_title);
            text.setText(item.getKey());
            boolean judge = true;
            for (Map.Entry<String,LinkedList<VulnRetu>> map:item.getValue().entrySet()) {
                Log.d("map_size", String.valueOf(map.getValue().size()));
                if (map.getValue().size() != 0){
                    judge = false;
                    break;
                }
            }
            Log.d("map_judge", String.valueOf(judge));
            TextView text_result = (TextView) view.findViewById(R.id.parent_result);
            if (judge){
                text_result.setTextColor(0xff33ff00);
                text_result.setText("安全");
            }else {
                text_result.setTextColor(0xffff0000);
                text_result.setText("高危");
            }
            return view;
        }

        //  获得子项显示的view
        @Override
        public View getChildView(int parentPos, int childPos, boolean b, View view, ViewGroup viewGroup) {
            if (view == null) {
                LayoutInflater inflater = (LayoutInflater) RecordInformationActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                view = inflater.inflate(R.layout.child_item, null);
            }
            view.setTag(R.layout.parent_item, parentPos);
            view.setTag(R.layout.child_item, childPos);
            TextView text_title = (TextView) view.findViewById(R.id.child_title);
            TextView text_information = (TextView) view.findViewById(R.id.child_information);
            Map.Entry<String,LinkedList<VulnRetu>> child_item = getChild(parentPos,childPos);
            if (child_item.getValue().size() == 0){
                text_title.setVisibility(View.GONE);
                text_information.setVisibility(View.GONE);
            }else {
                text_title.setVisibility(View.VISIBLE);
                text_information.setVisibility(View.VISIBLE);
                text_title.setText("漏洞详情："+child_item.getKey());
                StringBuilder stringBuilder = new StringBuilder();
                for (VulnRetu v:child_item.getValue()) {
                    stringBuilder.append(v.getStmtInfos()).append("\n");
                }
                text_information.setText(stringBuilder.toString());
                text_title.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Toast.makeText(RecordInformationActivity.this, "点到了内置的textview", Toast.LENGTH_SHORT).show();
                    }
                });
            }
            return view;
        }

        @Override   //  获得某个父项的某个子项
        public Map.Entry<String,LinkedList<VulnRetu>> getChild(int parentPos, int childPos) {
            ArrayList list = new ArrayList();
            Map.Entry<String, Map<String,LinkedList<VulnRetu>>> item = getGroup(parentPos);
            list.addAll(item.getValue().entrySet());
            Log.d("getChildrenCount", String.valueOf(list.size()));
            return (Map.Entry<String, LinkedList<VulnRetu>>) list.get(childPos);
        }

        @Override   //  获得父项的数量
        public int getGroupCount() {
            return mData.size();
        }

        @Override   //  获得某个父项的子项数目
        public int getChildrenCount(int parentPos) {
            ArrayList list = new ArrayList();
            Map.Entry<String, Map<String,LinkedList<VulnRetu>>> item = getGroup(parentPos);
            list.addAll(item.getValue().entrySet());
            Log.d("getChildrenCount", String.valueOf(list.size()));
            return list.size();
        }

        @Override   //  获得某个父项
        public Map.Entry<String, Map<String,LinkedList<VulnRetu>>> getGroup(int parentPos) {
            return (Map.Entry) mData.get(parentPos);
        }

        @Override   //  获得某个父项的id
        public long getGroupId(int parentPos) {
            return parentPos;
        }

        @Override   //  获得某个父项的某个子项的id
        public long getChildId(int parentPos, int childPos) {
            return childPos;
        }

        @Override   //  按函数的名字来理解应该是是否具有稳定的id，这个方法目前一直都是返回false，没有去改动过
        public boolean hasStableIds() {
            return false;
        }

        @Override   //  子项是否可选中，如果需要设置子项的点击事件，需要返回true
        public boolean isChildSelectable(int i, int i1) {
            return false;
        }
    }
}
