package com.example.liu.ad_detection.http;

import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.widget.Toast;
import com.example.liu.ad_detection.model.AppInfo;
import com.example.liu.ad_detection.uploadingFragment;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.Socket;

//上传分析线程
public class UploadAsyncTask extends AsyncTask<String, Integer, Boolean> {

    private AppInfo app;
    private Activity activity;

    public UploadAsyncTask(AppInfo appInfo, Activity activity) {
        this.app = appInfo;
        this.activity = activity;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
    }

    @Override
    protected void onPostExecute(Boolean s) {
        super.onPostExecute(s);
    }

    @Override
    protected void onProgressUpdate(Integer... values) {
        super.onProgressUpdate(values);
    }

    @Override
    protected void onCancelled(Boolean s) {
        super.onCancelled(s);
    }

    @Override
    protected void onCancelled() {
        super.onCancelled();
    }

    @Override
    protected Boolean doInBackground(String... strings) {
        Socket socket = null;
        try {
            socket = new Socket(IP.ip, 12345);
        } catch (IOException e) {
            e.printStackTrace();
        }
        HTTPHandler request = new HTTPHandler();
        request.setObject(HTTPHandler.object.FILE);
        request.setMethod(HTTPHandler.method.UPLOAD);
        request.setFields("File-Size", app.getSize());
        request.setFields("File-Hash", app.getHash());
        HTTPHandler response = null;
        try {
            response = HTTPHandler.sendRequestAndReadReponse(socket, request);
            socket.close();
            System.out.println(response.showReponseHead());
            System.out.println(new String(response.getContent()));
            if (new String(response.getContent()).equals("same file exist")){
                uploadingFragment.uploadingList.remove(app);
                if (activity != null) {   //如果退出了这个界面，ACtivity被销毁，获取不到就会报错
                    activity.runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            Intent intent = new Intent("com.example.liu.broadcasereceiver.MYRECEIVER");
                            intent.putExtra("update","notifyDataSetChanged");
                            activity.sendBroadcast(intent);     //发送刷新页面的广播
                            Toast.makeText(activity, "服务端已存在相同文件", Toast.LENGTH_SHORT).show();
                        }
                    });
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        //解析出基本数据
        int openPort;
        int start;
        ;
        assert response != null;
        if (response.getStatusCode().equals("200")) {
            openPort = Integer.valueOf(response.getFields("Open-Port"));
            String contentRange = response.getFields("Content-Range");
            start = Integer.valueOf(contentRange);
            System.out.println(start);
            //开始传输
            RandomAccessFile oSavedFile = null;
            try {
                socket = new Socket(IP.ip, openPort);
                oSavedFile = new RandomAccessFile(app.getSourceDir(), "r");
                oSavedFile.seek(start);
                DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
                int currentSize = start;
                byte[] buffer = new byte[1024];
                int read = 0;
                while (true) {
                    if (app.getUploadFlag() == 0) {
                        read = oSavedFile.read(buffer);
                        if (read != -1) {
                            dos.write(buffer, 0, read);
                            currentSize += read;
                            //System.out.println(currentSize);
                        } else {
                            System.out.println(currentSize + " ojbk");
                            uploadingFragment.uploadingList.remove(app);
                            if (activity != null) {   //如果退出了这个界面，ACtivity被销毁，获取不到就会报错
                                activity.runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        Intent intent = new Intent("com.example.liu.broadcasereceiver.MYRECEIVER");
                                        intent.putExtra("update","notifyDataSetChanged");
                                        activity.sendBroadcast(intent);     //发送刷新页面的广播
                                        Toast.makeText(activity, "上传完毕", Toast.LENGTH_SHORT).show();
                                    }
                                });
                            }
                            socket.close();
                            break;
                        }
                    } else if (app.getUploadFlag() == 1){
                        System.out.println("暂停上传");
                        socket.close();
                        break;
                    }else if (app.getUploadFlag() == -1){
                        System.out.println("停止上传");
                        socket.close();
                        break;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }finally {
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return null;
    }
}
