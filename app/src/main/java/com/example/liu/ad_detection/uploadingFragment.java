package com.example.liu.ad_detection;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.*;
import com.example.liu.ad_detection.http.HTTPHandler;
import com.example.liu.ad_detection.http.IP;
import com.example.liu.ad_detection.model.AppInfo;

import java.io.IOException;
import java.net.Socket;
import java.util.*;

public class uploadingFragment extends Fragment {

    public static List<AppInfo> uploadingList = new ArrayList<>();
    private ListView listView;
    private LinearLayout pauseORstart;
    private LinearLayout deleteAll;
    private TextView textPauseORstart;
    private UploadingAdapter adapter;

    private List<AppInfo> applist = new ArrayList<>();

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        applist.addAll(change_repeated(uploadingList));
        uploadingList.clear();
        View view = inflater.inflate(R.layout.layout_uploading, container,false);
        initView(view);
        return view;
    }

    private void initView(View view) {
        listView = (ListView)view.findViewById(R.id.uploading_list_view);
        pauseORstart = (LinearLayout) view.findViewById(R.id.btn_pause);
        deleteAll = (LinearLayout) view.findViewById(R.id.btn_deleteAll);
        textPauseORstart = (TextView) view.findViewById(R.id.pause_or_start);
        adapter = new UploadingAdapter(getContext(),applist);
        listView.setAdapter(adapter);
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                //当在下载的情况下，点击就暂停，反之继续
                ProgressBar progressBar = view.findViewById(R.id.uploading_progressBar);
                TextView textView = view.findViewById(R.id.uploading_progress_pause);
                if (progressBar.getVisibility() == View.VISIBLE){
                    textView.setVisibility(View.VISIBLE);
                    progressBar.setVisibility(View.GONE);
                }else {
                    progressBar.setVisibility(View.VISIBLE);
                    progressBar.setProgress(59);
                    textView.setVisibility(View.GONE);
                    textView.setText("已暂停，点击继续上传");
                    Log.d("uploadingFragment",applist.get(position).getSourceDir());
                }
            }
        });

        //全部删除
        deleteAll.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                new AlertDialog.Builder(getContext()).setTitle("确定不再上传吗").setPositiveButton("确定", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        applist.clear();
                        adapter.notifyDataSetChanged();
                    }
                }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                    }
                }).show();
            }
        });

        //全部暂停或继续
        textPauseORstart.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });

    }


    private List<AppInfo> change_repeated(List<AppInfo> appInfoList){
        Set<AppInfo> set = new HashSet<>();
        List<AppInfo> newList = new  ArrayList<>();
        for (AppInfo app:appInfoList) {
            if(set.add(app)){
                newList.add(app);
            }
        }
        return newList;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
    }

    //检测上传进度线程
    class Uploading_POST implements Runnable{

        private String size;
        private String hash;
        public boolean flag = false;
        public HTTPHandler httpHandler;

        Uploading_POST(String size, String hash) {
            this.size = size;
            this.hash = hash;
        }

        @Override
        public void run() {
            Socket socket = null;
            try {
                socket = new Socket(IP.ip,12345);
            } catch (IOException e) {
                e.printStackTrace();
            }
            HTTPHandler request = new HTTPHandler();
            request.setObject(HTTPHandler.object.FILE);
            request.setMethod(HTTPHandler.method.UPLOAD);
            HashMap<String,String> POST = new HashMap<>();
            POST.put("size",size);
            POST.put("hash",hash);
            request.addPOST(POST);
            try {
                HTTPHandler response = HTTPHandler.sendRequestAndReadReponse(socket,request);
                System.out.println(response.showReponseHead());
                System.out.println(new String(response.getContent()));
                this.httpHandler = response;
                flag = true;
                socket.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    //上传listview适配器
    class UploadingAdapter extends BaseAdapter {

        private List<AppInfo> appInfoList = null;

        LayoutInflater infater = null;

        UploadingAdapter(Context context, List<AppInfo> apps) {
            infater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            appInfoList = apps;
        }

        @Override
        public int getCount() {
            System.out.println("size" + appInfoList.size());
            return appInfoList.size();
        }

        @Override
        public Object getItem(int position) {
            return appInfoList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(final int position, View convertView, ViewGroup parent) {
            System.out.println("getView at " + position);
            View view = null;
            ViewHolder holder = null;
            if (convertView == null || convertView.getTag() == null) {
                view = infater.inflate(R.layout.uploading_item,parent,false);
                holder = new ViewHolder(view);
                view.setTag(holder);
            }
            else{
                view = convertView;
                holder = (ViewHolder) convertView.getTag();
            }
            AppInfo appInfo = (AppInfo) getItem(position);
            holder.tvAppLabel.setText(appInfo.getAppLabel());
            holder.appIcon.setImageDrawable(appInfo.getAppIcon());
            if (holder.uploading_progress_pause.getVisibility() == View.GONE){
                holder.uploading_process.setSecondaryProgress(new Random(100).nextInt());
            }else {
                holder.uploading_process.setVisibility(View.GONE);
                holder.uploading_progress_pause.setText("已暂停，点击继续下载");
            }
            holder.delete.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    new AlertDialog.Builder(getContext()).setTitle("确定删除").setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            appInfoList.remove(position);
                            Toast.makeText(getContext(),"删除成功",Toast.LENGTH_SHORT).show();
                            notifyDataSetChanged();
                        }
                    }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                        }
                    }).show();
                }
            });
            return view;
        }

    }
    class ViewHolder {
        ImageView appIcon;
        TextView tvAppLabel;
        Button delete;
        ProgressBar uploading_process;
        TextView uploading_progress_pause;

        private ViewHolder(View view) {
            this.appIcon = (ImageView) view.findViewById(R.id.uploading_imgApp);
            this.tvAppLabel = (TextView) view.findViewById(R.id.uploading_tvAppLabel);
            this.delete = (Button) view.findViewById(R.id.uploading_delete);
            this.uploading_process = (ProgressBar) view.findViewById(R.id.uploading_progressBar);
            this.uploading_progress_pause = (TextView) view.findViewById(R.id.uploading_progress_pause);
        }

    }

}
