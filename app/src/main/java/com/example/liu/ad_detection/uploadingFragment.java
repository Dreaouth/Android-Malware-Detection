package com.example.liu.ad_detection;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.*;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.*;
import com.example.liu.ad_detection.http.HTTPHandler;
import com.example.liu.ad_detection.http.IP;
import com.example.liu.ad_detection.http.UploadAsyncTask;
import com.example.liu.ad_detection.model.AppInfo;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.Socket;
import java.util.*;


/**
 * （1）关于uploadinglist:
 *  uploadinglist 是一个静态的全局变量，因为要在上传详情界面显示当前正在上传的应用，并显示下载进度
 * 所以要设置一个flag值，以保证上传完的apk不再显示在该界面上。这样就产生了一个问题，当一个应用上传完时,
 * 就要将uploadinglist里的flag设为false，这样我打开上传完成界面时，对uploadinglist进行操作，会产生名为
 * java.util.ConcurrentModificationException异常，因为有两个线程在同时操作uploadinglist。
 *      解决方法：使用并发容器CopyOnWriteArrayList
 * （2）打算不用uploadlinglist，设置一个service，从service向服务器获取上传数据（应用列表）
 */
public class uploadingFragment extends Fragment {

    public static List<AppInfo> uploadingList = new ArrayList<>();
    private ListView listView;
    private LinearLayout pauseORstart;
    private LinearLayout deleteAll;
    private TextView textPauseORstart;
    private UploadingAdapter adapter;


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.layout_uploading, container,false);
        initView(view);
        return view;
    }

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        IntentFilter filter = new IntentFilter();
        filter.addAction("com.example.liu.broadcasereceiver.MYRECEIVER");
        getActivity().registerReceiver(broadcastReceiver,filter);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        getActivity().unregisterReceiver(broadcastReceiver);
    }

    private void check_UploadingFlag() {
        for (AppInfo app : uploadingList) {
            if (app.isUploadFlag())
                uploadingList.remove(app);
        }
    }

    //发送http请求，上传文件
    private void sendHttpRequest(AppInfo appInfo) {
        appInfo.setUploadFlag(false);
        Log.d("FileInformation",appInfo.getSize());
        Log.d("FileInformation",appInfo.getHash());
        UploadAsyncTask uploadTask = new UploadAsyncTask(appInfo,getActivity());
        uploadTask.execute("1");
//        Upload_POST post = new Upload_POST(appInfo);
//        new Thread(post).start();       //开启一个新线程，处理上传apk
    }

    private void initView(View view) {
        listView = (ListView)view.findViewById(R.id.uploading_list_view);
        pauseORstart = (LinearLayout) view.findViewById(R.id.btn_pause);
        deleteAll = (LinearLayout) view.findViewById(R.id.btn_deleteAll);
        textPauseORstart = (TextView) view.findViewById(R.id.pause_or_start);
        adapter = new UploadingAdapter(getContext(),uploadingList);
        listView.setAdapter(adapter);
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                //当在上传的情况下，点击就暂停，反之继续
                ProgressBar progressBar = view.findViewById(R.id.uploading_progressBar);
                TextView textView = view.findViewById(R.id.uploading_progress_pause);
                if (progressBar.getVisibility() == View.VISIBLE){
                    textView.setVisibility(View.VISIBLE);
                    progressBar.setVisibility(View.GONE);
                    uploadingList.get(position).setUploadFlag(true);    //即终止上传的socker连接，记住断电（断电续传）
                }else {
                    progressBar.setVisibility(View.VISIBLE);
                    progressBar.setProgress(59);
                    textView.setVisibility(View.GONE);
                    sendHttpRequest(uploadingList.get(position));       //重新发送http上传请求
                    Log.d("uploadingFragment",uploadingList.get(position).getSourceDir());
                }
            }
        });

        //全部删除
        deleteAll.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                new AlertDialog.Builder(getContext()).setTitle("确定不再上传吗").setPositiveButton("确定", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        uploadingList.clear();
                        adapter.notifyDataSetChanged();
                    }
                }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                    }
                }).show();
            }
        });

        //全部暂停或继续
        textPauseORstart.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });

    }


    //上传分析线程
    /*public class UploadTask extends AsyncTask<String, Integer, Boolean>{

        private AppInfo app;

        UploadTask(AppInfo appInfo) {
            this.app = appInfo;
        }

        public UploadTask() {
            super();
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected void onPostExecute(Boolean s) {
            super.onPostExecute(s);
        }

        @Override
        protected void onProgressUpdate(Integer... values) {
            super.onProgressUpdate(values);
        }

        @Override
        protected void onCancelled(Boolean s) {
            super.onCancelled(s);
        }

        @Override
        protected void onCancelled() {
            super.onCancelled();
        }

        @Override
        protected Boolean doInBackground(String... strings) {
            Socket socket = null;
            try {
                socket = new Socket(IP.ip ,12345);
            } catch (IOException e) {
                e.printStackTrace();
            }
            HTTPHandler request = new HTTPHandler();
            request.setObject(HTTPHandler.object.FILE);
            request.setMethod(HTTPHandler.method.UPLOAD);
            request.setFields("File-Size", app.getSize());
            request.setFields("File-Hash", app.getHash());
            HTTPHandler response = null;
            try {
                response = HTTPHandler.sendRequestAndReadReponse(socket,request);
                socket.close();
                System.out.println(response.showReponseHead());
                System.out.println(new String(response.getContent()));
            } catch (Exception e) {
                e.printStackTrace();
            }

            //解析出基本数据
            int openPort;
            int start;;
            assert response != null;
            if(response.getStatusCode().equals("200")) {
                openPort = Integer.valueOf(response.getFields("Open-Port"));
                String contentRange = response.getFields("Content-Range");
                start = Integer.valueOf(contentRange);
                System.out.println(start);
                //开始传输
                RandomAccessFile oSavedFile = null;
                try {
                    socket = new Socket(IP.ip, openPort);
                    oSavedFile = new RandomAccessFile(app.getSourceDir(), "r");
                    oSavedFile.seek(start);
                    DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
                    int currentSize = start;
                    byte[] buffer = new byte[1024];
                    int read = 0;
                    while(true){
                        if (!app.isUploadFlag()){
                            read = oSavedFile.read(buffer);
                            if(read != -1){
                                dos.write(buffer, 0, read);
                                currentSize += read;
                                System.out.println(currentSize);
                            }else{
                                System.out.println(currentSize+" ojbk");
                                uploadingFragment.uploadingList.remove(app);

//                                if (getActivity()!=null){   //如果退出了这个界面，ACtivity被销毁，获取不到就会报错
//                                    getActivity().runOnUiThread(new Runnable() {
//                                        @Override
//                                        public void run() {
//                                            adapter.notifyDataSetChanged();
//                                            Toast.makeText(getContext(),"上传完毕",Toast.LENGTH_SHORT).show();
//                                        }
//                                    });
//                                }
                                socket.close();
                                break;
                            }
                        }else {
                            System.out.println("暂停上传");
                            socket.close();
                            break;
                        }
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }finally {
                    try {
                        socket.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return null;
        }
    }*/

    BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if (intent.getAction().equals("com.example.liu.broadcasereceiver.MYRECEIVER")){
                if (getActivity()!=null){
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            adapter.notifyDataSetChanged();
                            Log.d("uploadingFragment","uploadfataset");
                        }
                    });
                }
            }
        }
    };

    //上传线程
    /*class Upload_POST implements Runnable{

        private AppInfo app;

        Upload_POST(AppInfo appInfo) {
            this.app = appInfo;
        }

        @Override
        public void run() {
            Socket socket = null;
            try {
                socket = new Socket(IP.ip ,12345);
            } catch (IOException e) {
                e.printStackTrace();
            }
            HTTPHandler request = new HTTPHandler();
            request.setObject(HTTPHandler.object.FILE);
            request.setMethod(HTTPHandler.method.UPLOAD);
            request.setFields("File-Size", app.getSize());
            request.setFields("File-Hash", app.getHash());
            HTTPHandler response = null;
            try {
                response = HTTPHandler.sendRequestAndReadReponse(socket,request);
                socket.close();
                System.out.println(response.showReponseHead());
                System.out.println(new String(response.getContent()));
            } catch (Exception e) {
                e.printStackTrace();
            }

            //解析出基本数据
            int openPort;
            int start;;
            assert response != null;
            if(response.getStatusCode().equals("200")) {
                openPort = Integer.valueOf(response.getFields("Open-Port"));
                String contentRange = response.getFields("Content-Range");
                start = Integer.valueOf(contentRange);
                System.out.println(start);
                //开始传输
                RandomAccessFile oSavedFile = null;
                try {
                    socket = new Socket(IP.ip, openPort);
                    oSavedFile = new RandomAccessFile(app.getSourceDir(), "r");
                    oSavedFile.seek(start);
                    DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
                    int currentSize = start;
                    byte[] buffer = new byte[1024];
                    int read = 0;
                    while(true){
                        if (!app.isUploadFlag()){
                            read = oSavedFile.read(buffer);
                            if(read != -1){
                                dos.write(buffer, 0, read);
                                currentSize += read;
                                System.out.println(currentSize);
                            }else{
                                System.out.println(currentSize+" ojbk");
                                uploadingFragment.uploadingList.remove(app);
                                if (getActivity()!=null){   //如果退出了这个界面，ACtivity被销毁，获取不到就会报错
                                    getActivity().runOnUiThread(new Runnable() {
                                        @Override
                                        public void run() {
                                            adapter.notifyDataSetChanged();
                                            Toast.makeText(getContext(),"上传完毕",Toast.LENGTH_SHORT).show();
                                        }
                                    });
                                }
                                socket.close();
                                break;
                            }
                        }else {
                            System.out.println("暂停上传");
                            socket.close();
                            break;
                        }
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }finally {
                    try {
                        socket.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }*/

    //上传listview适配器
    class UploadingAdapter extends BaseAdapter {

        private List<AppInfo> appInfoList = null;

        LayoutInflater infater = null;

        UploadingAdapter(Context context, List<AppInfo> apps) {
            infater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            appInfoList = apps;
        }

        @Override
        public int getCount() {
            return appInfoList.size();
        }

        @Override
        public Object getItem(int position) {
            return appInfoList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(final int position, View convertView, ViewGroup parent) {
            System.out.println("getView at " + position);
            View view = null;
            ViewHolder holder = null;
            if (convertView == null || convertView.getTag() == null) {
                view = infater.inflate(R.layout.uploading_item,parent,false);
                holder = new ViewHolder(view);
                view.setTag(holder);
            }
            else{
                view = convertView;
                holder = (ViewHolder) convertView.getTag();
            }
            AppInfo appInfo = (AppInfo) getItem(position);
            holder.tvAppLabel.setText(appInfo.getAppLabel());
            holder.appIcon.setImageDrawable(appInfo.getAppIcon());
            if (!appInfo.isUploadFlag()){
                holder.uploading_process.setProgress(new Random(60).nextInt());
            }else {
                holder.uploading_process.setVisibility(View.GONE);
                holder.uploading_progress_pause.setVisibility(View.VISIBLE);
            }
            holder.delete.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    new AlertDialog.Builder(getContext()).setTitle("确定删除").setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            appInfoList.remove(position);
                            Toast.makeText(getContext(),"删除成功",Toast.LENGTH_SHORT).show();
                            notifyDataSetChanged();
                        }
                    }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                        }
                    }).show();
                }
            });
            return view;
        }

    }
    class ViewHolder {
        ImageView appIcon;
        TextView tvAppLabel;
        Button delete;
        ProgressBar uploading_process;
        TextView uploading_progress_pause;

        private ViewHolder(View view) {
            this.appIcon = (ImageView) view.findViewById(R.id.uploading_imgApp);
            this.tvAppLabel = (TextView) view.findViewById(R.id.uploading_tvAppLabel);
            this.delete = (Button) view.findViewById(R.id.uploading_delete);
            this.uploading_process = (ProgressBar) view.findViewById(R.id.uploading_progressBar);
            this.uploading_progress_pause = (TextView) view.findViewById(R.id.uploading_progress_pause);
        }

    }

}
