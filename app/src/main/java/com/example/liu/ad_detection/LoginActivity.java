package com.example.liu.ad_detection;

import android.animation.*;
import android.app.Activity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import com.example.liu.ad_detection.http.HTTPHandler;
import com.example.liu.ad_detection.http.IP;
import com.example.liu.ad_detection.model.JellyInterpolator;

import java.io.IOException;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

public class LoginActivity extends Activity implements View.OnClickListener {

    private TextView mBtnLogin;
    private TextView mBtnRegister;
    private View progress;
    private View mInputLayout;
    private EditText mNameView;
    private EditText mPassView;
    private float mWidth, mHeight;
    private LinearLayout mName, mPsw;
    private UserLoginTask mAuthTask;
    private boolean test = true;    //测试

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.activity_login);
        initView();
    }

    private void initView() {
        mBtnLogin = (TextView) findViewById(R.id.main_btn_login);
        progress = findViewById(R.id.layout_progress);
        mInputLayout = findViewById(R.id.input_layout);
        mName = (LinearLayout) findViewById(R.id.input_layout_name);
        mPsw = (LinearLayout) findViewById(R.id.input_layout_psw);
        mBtnRegister = (TextView) findViewById(R.id.register);
        mNameView = (EditText) findViewById(R.id.username_login);
        mPassView = (EditText) findViewById(R.id.password_login);
        mBtnRegister.setOnClickListener(this);
        mBtnLogin.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.register:
                Intent intent = new Intent(LoginActivity.this, RegisterActivity.class);
                startActivity(intent);
                break;
            case R.id.main_btn_login:
                judge_login();
                // 计算出控件的高与宽
                mWidth = mBtnLogin.getMeasuredWidth();
                mHeight = mBtnLogin.getMeasuredHeight();
                break;
        }
    }

    /**
     * 输入框的动画效果
     *
     * @param view 控件
     * @param w    宽
     * @param h    高
     */
    private void inputAnimator(final View view, float w, float h) {

        AnimatorSet set = new AnimatorSet();

        ValueAnimator animator = ValueAnimator.ofFloat(0, w);
        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {

            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                float value = (Float) animation.getAnimatedValue();
                ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) view.getLayoutParams();
                params.leftMargin = (int) value;
                params.rightMargin = (int) value;
                view.setLayoutParams(params);
            }
        });

        ObjectAnimator animator2 = ObjectAnimator.ofFloat(mInputLayout, "scaleX", 1f, 0.5f);
        set.setDuration(1000);
        set.setInterpolator(new AccelerateDecelerateInterpolator());
        set.playTogether(animator, animator2);
        set.start();
        set.addListener(new Animator.AnimatorListener() {

            @Override
            public void onAnimationStart(Animator animation) {

            }

            @Override
            public void onAnimationRepeat(Animator animation) {

            }

            @Override
            public void onAnimationEnd(Animator animation) {
                /*
                 * 动画结束后，先显示加载的动画，然后再隐藏输入框
                 */
                Log.d("MainActicity","End?");
                progress.setVisibility(View.VISIBLE);
                progressAnimator(progress);
                mInputLayout.setVisibility(View.INVISIBLE);
                Intent intent = new Intent(LoginActivity.this,MainActivity.class);
                startActivity(intent);
                finish();
            }

            @Override
            public void onAnimationCancel(Animator animation) {

            }
        });
    }

    /**
     * 出现进度动画
     *
     * @param view
     */
    private void progressAnimator(final View view) {
        PropertyValuesHolder animator = PropertyValuesHolder.ofFloat("scaleX", 0.5f, 1f);
        PropertyValuesHolder animator2 = PropertyValuesHolder.ofFloat("scaleY", 0.5f, 1f);
        ObjectAnimator animator3 = ObjectAnimator.ofPropertyValuesHolder(view, animator, animator2);
        animator3.setDuration(1000);
        animator3.setInterpolator(new JellyInterpolator());
        animator3.start();
    }

    private void judge_login() {

        // Reset errors.
        mNameView.setError(null);
        mPassView.setError(null);

        // Store values at the time of the login attempt.
        String username = mNameView.getText().toString();
        String password = mPassView.getText().toString();

        boolean cancel = false;
        View focusView = null;

        // Check for a valid password, if the user entered one.
        if (TextUtils.isEmpty(password)) {
            mPassView.setError(getString(R.string.error_field_required));
            focusView = mPassView;
            cancel = true;
        }

        // Check for a valid email address.
        if (TextUtils.isEmpty(username)) {
            mNameView.setError(getString(R.string.error_field_required));
            focusView = mNameView;
            cancel = true;
        }
        if (cancel) {
            focusView.requestFocus();
        } else {
            // Show a progress spinner, and kick off a background task to
            // perform the user login attempt.
            mAuthTask = new UserLoginTask(username, password);
            mAuthTask.execute((Void) null);
        }
    }


    /**
     * Represents an asynchronous login/registration task used to authenticate
     * the user.
     */
    public class UserLoginTask extends AsyncTask<Void, Void, Integer> {

        private final String username;
        private final String password;
        private HTTPHandler httpHandler;

        UserLoginTask(String username, String password) {
            this.username = username;
            this.password = password;
        }

        @Override
        protected Integer doInBackground(Void... params) {
            // TODO: attempt authentication against a network service.

            try {
                // Simulate network access.
                Thread.sleep(100);
            } catch (InterruptedException e) {
                return -1;
            }

            if (test){
                return 1;
            }
            //与服务器进行交互的逻辑
            Login_POST post = new Login_POST(username,password);
            new Thread(post).start();
            while (true){
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                if (post.flag){
                    Log.d("Login_POST",new String(post.httpHandler.getContent()));
                    this.httpHandler = post.httpHandler;
                    break;
                }
            }
            if (this.httpHandler.getStatusCode().equals("200")){    //return后执行onPostExecute
                return 1;
            }else {
                return 0;
            }
            // TODO: register the new account here.
        }

        @Override
        protected void onPostExecute(Integer success) {
            mAuthTask = null;
            if (success==1) {
                //将cookie存到缓存中
//                SharedPreferences.Editor editor = getSharedPreferences("cookie",MODE_PRIVATE).edit();
//                for (Map.Entry<String,String> entry:httpHandler.getCookie().entrySet()) {
//                    editor.putString(entry.getKey(),entry.getValue());
//                }
//                editor.apply();

                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(LoginActivity.this,"登录成功",Toast.LENGTH_SHORT).show();
                    }
                });
                // 隐藏输入框
                mName.setVisibility(View.INVISIBLE);
                mPsw.setVisibility(View.INVISIBLE);
                inputAnimator(mInputLayout, mWidth, mHeight);
            }else {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        Toast.makeText(LoginActivity.this,new String(httpHandler.getContent()),Toast.LENGTH_SHORT).show();
                    }
                });
            }
        }

        @Override
        protected void onCancelled() {
            mAuthTask = null;
        }
    }

    //登录线程
    class Login_POST implements Runnable{

        private String username;
        private String password;
        public boolean flag = false;
        public HTTPHandler httpHandler;

        Login_POST(String username, String password) {
            this.password = password;
            this.username = username;
        }

        @Override
        public void run() {
            Socket socket = null;
            try {
                socket = new Socket(IP.ip,12345);
            } catch (IOException e) {
                e.printStackTrace();
            }
            HTTPHandler request = new HTTPHandler();
            request.setObject(HTTPHandler.object.MESSAGE);
            request.setMethod(HTTPHandler.method.LOGIN);
            HashMap<String,String> POST = new HashMap<>();
            POST.put("username",username);
            POST.put("password",password);
            request.addPOST(POST);
            try {
                HTTPHandler response = HTTPHandler.sendRequestAndReadReponse(socket,request);
                System.out.println(response.showReponseHead());
                System.out.println(new String(response.getContent()));
                System.out.println(response.getCookie("session"));
                this.httpHandler = response;
                flag = true;
                socket.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}