package com.example.liu.ad_detection;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.widget.SwipeRefreshLayout;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.*;
import com.example.liu.ad_detection.http.HTTPHandler;
import com.example.liu.ad_detection.http.IP;
import com.example.liu.ad_detection.model.AppInfo;

import java.io.IOException;
import java.io.Serializable;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class RecordFragment extends Fragment {

    public SwipeRefreshLayout swipeRefreshLayout;
    private ListView listView;
    private RecordItemAdapter adapter;
    public static List<AppInfo> uploadRecordList = new ArrayList<>();
    public List<AppInfo> resultList = new ArrayList<>();

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // TODO Auto-generated method stub
        View view = inflater.inflate(R.layout.layout_record, container,false);
        SharedPreferences pref = getActivity().getSharedPreferences("result",Context.MODE_PRIVATE);
        for(Map.Entry<String,?> map:pref.getAll().entrySet()){      //循环遍历缓存，找出可以已经检测过的应用
            System.out.println(map.getKey());
            for (AppInfo appInfo:UploadActivity.applist){
                if (appInfo.getHash().equals(map.getKey())){
                    appInfo.setMessage((String) map.getValue());
                    appInfo.setTime((String)pref.getString(map.getKey()+"time",""));
                    resultList.add(appInfo);
                }
            }
        }
        initView(view);
        return view;
    }

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    private void initView(View view)
    {
        swipeRefreshLayout = (SwipeRefreshLayout)view.findViewById(R.id.swipe_fresh);
        swipeRefreshLayout.setColorSchemeResources(R.color.colorPrimary);
        listView = (ListView)view.findViewById(R.id.uploading_return_list_view);
        adapter = new RecordItemAdapter(getContext(),resultList);
        listView.setAdapter(adapter);
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Intent intent = new Intent(getActivity(),RecordInformationActivity.class);
                AppInfo appInfo = resultList.get(position);
                intent.putExtra("result_appLabel", appInfo.getAppLabel());
                intent.putExtra("result_pkgName",appInfo.getPkgName());
                intent.putExtra("result_hash",appInfo.getHash());
                intent.putExtra("result_time",appInfo.getTime());
                intent.putExtra("result_message",appInfo.getMessage());
                startActivity(intent);
            }
        });
        swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                if (uploadRecordList.size()>0){
                    for (AppInfo app :uploadRecordList) {
                        Ask_Result result = new Ask_Result(app);   //访问服务器是否有返回结果
                        new Thread(result).start();
                    }
                }else {
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            Toast.makeText(getContext(),"当前无应用上传完毕",Toast.LENGTH_SHORT).show();
                            swipeRefreshLayout.setRefreshing(false);
                        }
                    });
                }
            }
        });

    }

    class Ask_Result implements Runnable{

        public boolean flag = false;
        AppInfo appInfo;

        public Ask_Result(AppInfo app) {
            this.appInfo = app;
        }

        @Override
        public void run() {
            Socket socket = null;
            try {
                socket = new Socket(IP.ip,12345);
                HTTPHandler request = new HTTPHandler();
                request.setFields("FILE-HASH", appInfo.getHash());
                request.setMethod(HTTPHandler.method.ANALYSIS);
                request.setObject(HTTPHandler.object.MESSAGE);

                HTTPHandler reponse = HTTPHandler.sendRequestAndReadReponse(socket, request);
                System.out.println(appInfo.getHash());
                System.out.println("返回状态码："+reponse.getStatusCode());
                System.out.println(new String(reponse.getContent()));
                flag = true;
                if (reponse.getStatusCode().equals("200")){
                    appInfo.setMessage(new String(reponse.getContent()));
                    resultList.add(appInfo);
                    uploadRecordList.remove(appInfo);
                    //将得到的结果放入缓存中，以便以后查看
                    SharedPreferences.Editor editor = getActivity().getSharedPreferences("result",Context
                            .MODE_PRIVATE).edit();
                    editor.putString(appInfo.getHash(),appInfo.getMessage());
                    editor.putString(appInfo.getHash()+"time",appInfo.getTime());
                    editor.apply();
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            swipeRefreshLayout.setRefreshing(false);
                            Toast.makeText(getContext(),"刷新成功",Toast.LENGTH_SHORT).show();
                            adapter.notifyDataSetChanged();
                        }
                    });
                }else {
                    getActivity().runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            swipeRefreshLayout.setRefreshing(false);
                            Toast.makeText(getContext(), new String(reponse.getContent()), Toast.LENGTH_SHORT).show();
                            adapter.notifyDataSetChanged();
                        }
                    });
                }
                flag = true;
            }catch (Exception e){
                e.printStackTrace();
            } finally {
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    //服务器返回内容
    class RecordItemAdapter extends BaseAdapter {

        private List<AppInfo> appInfoList = null;

        LayoutInflater infater = null;

        RecordItemAdapter(Context context, List<AppInfo> apps) {
            infater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            appInfoList = apps;
        }

        @Override
        public int getCount() {
            return appInfoList.size();
        }

        @Override
        public Object getItem(int position) {
            return appInfoList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(final int position, View convertView, ViewGroup parent) {
            System.out.println("getView at " + position);
            View view = null;
            ViewHolder holder = null;
            if (convertView == null || convertView.getTag() == null) {
                view = infater.inflate(R.layout.record_item,parent,false);
                holder = new ViewHolder(view);
                view.setTag(holder);
            }
            else{
                view = convertView;
                holder = (ViewHolder) convertView.getTag();
            }
            AppInfo appInfo = (AppInfo) getItem(position);
            holder.tvAppLabel.setText(appInfo.getAppLabel());
            holder.appIcon.setImageDrawable(appInfo.getAppIcon());
            holder.time.setText(appInfo.getTime());
            return view;
        }
    }

    class ViewHolder {
        ImageView appIcon;
        TextView tvAppLabel;
        TextView time;

        private ViewHolder(View view) {
            this.appIcon = (ImageView) view.findViewById(R.id.record_imgApp);
            this.tvAppLabel = (TextView) view.findViewById(R.id.record_tvAppLabel);
            this.time = (TextView) view.findViewById(R.id.record_time);
          }

    }
}
