package com.example.liu.ad_detection;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import android.view.*;
import android.widget.*;
import com.example.liu.ad_detection.http.HTTPHandler;
import com.example.liu.ad_detection.http.IP;
import com.example.liu.ad_detection.http.UploadAsyncTask;
import com.example.liu.ad_detection.model.AppInfo;

import java.io.*;
import java.net.Socket;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/*
* 选择应用上传页面，可以单选或批量上传应用到服务器进行检测
* */
public class UploadActivity extends AppCompatActivity {
    private static final String TAG = "UploadActivity";
    //布局对象
    private ListView listview;
    private Button deleteBt;
    private Button cancelBt;
    private Button backBt;
    private CheckBox selectAllCheckbox;
    private RelativeLayout relativeLayout;
    private Button check_upload;
    private ProgressDialog progressDialog;

    private boolean isSelecting = false;    //是否正在选择
    private List<AppInfo> applist = new ArrayList<>();
    private AppAdapter adapter;
    private List<AppInfo> uploadList = new ArrayList<>();   //存储将要上传的子项们的位置
    private boolean selectAll = false;      //选择全部

    private int choose = -1;                //第一次长按的位置，让它被选定
    private boolean isClosing = false;      //关闭选择的一瞬间
    private PackageManager pm;              //获取apk信息

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_upload);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        initView();
    }

    // 根据查询条件，查询第三方安装的APP
    public List<AppInfo> queryFilterAppInfo() {
        pm = this.getPackageManager();
        // 查询所有已经安装的应用程序
        List<ApplicationInfo> listAppcations = pm.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES);
        System.out.println(listAppcations.size());
        Collections.sort(listAppcations, new ApplicationInfo.DisplayNameComparator(pm));// 排序
        List<AppInfo> appInfos = new ArrayList<>(); // 保存过滤查到的AppInfo
        System.out.println(appInfos.size());
        appInfos.clear();
        for (ApplicationInfo app : listAppcations) {
            //非系统程序
            if ((app.flags & ApplicationInfo.FLAG_SYSTEM) <= 0) {
                appInfos.add(getAppInfo(app));
            }
            //本来是系统程序，被用户手动更新后，该系统程序也成为第三方应用程序了
            else if ((app.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0){
                appInfos.add(getAppInfo(app));
            }
        }
        return appInfos;
    }
    // 构造一个AppInfo对象 ，并赋值
    private AppInfo getAppInfo(ApplicationInfo app) {
        AppInfo appInfo = new AppInfo();
        appInfo.setAppLabel((String) app.loadLabel(pm));
        appInfo.setAppIcon(app.loadIcon(pm));
        appInfo.setPkgName(app.packageName);
        appInfo.setSourceDir(app.sourceDir);
        appInfo.setSize(new File(app.sourceDir).length() + "");
        appInfo.setUploadFlag(0);
        appInfo.setProcess(1);

        //计算文件hash值
        FileInputStream fis = null;
        byte[] digest = null;
        StringBuilder result = new StringBuilder();
        try {
            fis = new FileInputStream(app.sourceDir);
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            //整合为数据流Filter
            DigestInputStream dis = new DigestInputStream(fis, md);
            //进行过滤
            byte[] buffer = new byte[4096];
            while(dis.read(buffer) != -1);
            digest = md.digest();
            for (byte b : digest) {
                String temp = Integer.toHexString(b & 0xff);
                if (temp.length() == 1) {
                    temp = "0" + temp;
                }
                result.append(temp);
            }
            dis.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        appInfo.setHash(result.toString().toUpperCase());

        return appInfo;
    }

    private void initView() {
        //获取布局控件对象
        deleteBt = (Button) findViewById(R.id.delete_bt);
        cancelBt = (Button) findViewById(R.id.cancel_bt);
        backBt = (Button) findViewById(R.id.back_upload);
        check_upload = (Button) findViewById(R.id.check_upload);                    //上传详情
        selectAllCheckbox  = (CheckBox) findViewById(R.id.select_all_checkbox);     //选中所有checkbox
        relativeLayout = (RelativeLayout) findViewById(R.id.relativeLayout);        //底部批量上传栏

        //listView相关逻辑代码：
        listview = (ListView) findViewById(R.id.list_view);
        showProgressDialog();

        new Thread(new Runnable() {
            @Override
            public void run() {
                applist = queryFilterAppInfo(); // 查询所有应用程序信息
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        adapter = new AppAdapter(UploadActivity.this,applist);
                        listview.setAdapter(adapter);
                        closeProgressDialog();
                    }
                });
            }
        }).start();

        listview.setOnItemClickListener(new AdapterView.OnItemClickListener() {     //当单击listview中的一个选项时
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, final int position, long l) {
                //如果在长按状态下（checkbox开启），那么单击表示选中(或删除)该checkbox
                if (isSelecting) {
                    CheckBox checkBox = view.findViewById(R.id.item_checkbox);
                    checkBox.setChecked(!checkBox.isChecked());
                    applist.get(position).setChecked(checkBox.isChecked());
                    if (checkBox.isChecked() && !uploadList.contains(applist.get(position))) {
                        uploadList.add(applist.get(position));
                    } else if (!checkBox.isChecked() && uploadList.contains(applist.get(position))) {
                        for (int i = 0; i < uploadList.size(); i++) {
                            if (uploadList.get(i).equals(applist.get(position))) {
                                uploadList.remove(i);
                            }
                        }
                    }
                } else {
                    //如果没在长按状态下，就表示只上传这一个文件（添加到上传列表），这时弹出一个对话框，确认是否上传
                    new AlertDialog.Builder(UploadActivity.this).setTitle("是否上传").setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            sendHttpRequest(applist.get(position));
                        }
                    }).setNegativeButton("取消", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                        }
                    }).show();
                }
            }
        });

        //长按表示是否弹出checkbox选项，并弹出底部批量上传栏
        listview.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int position, long l) {
                if (isSelecting) {
                    CheckBox checkBox = view.findViewById(R.id.item_checkbox);
                    checkBox.setChecked(!checkBox.isChecked());
                    applist.get(position).setChecked(checkBox.isChecked());
                    if (checkBox.isChecked() && !uploadList.contains(applist.get(position))) {
                        uploadList.add(applist.get(position));
                    } else if (!checkBox.isChecked() && uploadList.contains(applist.get(position))) {
                        for (int i = 0; i < uploadList.size(); i++) {
                            if (uploadList.get(i).equals(applist.get(position))) {
                                uploadList.remove(i);
                            }
                        }
                    }
                } else {
                    choose = position;
                    applist.get(position).setChecked(true);
                    uploadList.add(applist.get(position));
                    isSelecting = true;
                    adapter.notifyDataSetInvalidated();
                    relativeLayout.setVisibility(View.VISIBLE);     //弹出底部批量上传栏
                }

                return true;
            }
        });

        //按钮：取消选择
        cancelBt.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                cancel();
            }
        });

        //按钮：批量上传选择项
        deleteBt.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Collections.reverse(uploadList);
                //提交上传apk的http请求
                for (AppInfo anUploadList : uploadList) {
                    sendHttpRequest(anUploadList);
                }
                //设置所有checkbox为未选中
                for (AppInfo anApplist : applist) {
                    anApplist.setChecked(false);
                }
                isClosing = true;
                adapter.notifyDataSetInvalidated();
                relativeLayout.setVisibility(View.GONE);        //取消底部批量上传栏
                isSelecting = false;
                uploadList.clear();
            }
        });

        //checkBox：全选
        selectAllCheckbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {
                if (isChecked) {
                    uploadList.clear();
                    uploadList.addAll(applist);
                    selectAll = true;
                    adapter.notifyDataSetInvalidated();
                } else {
                    uploadList.clear();
                    selectAll = false;
                    adapter.notifyDataSetChanged();
                }
            }
        });

        //查看上传记录
        check_upload.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(UploadActivity.this,uploadMain.class);
                startActivity(intent);
            }
        });

        //返回
        backBt.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });
    }

    //发送http请求，上传文件
    private void sendHttpRequest(AppInfo appInfo) {
        for (AppInfo app:uploadingFragment.uploadingList) {
            if (app.getHash().equals(appInfo.getHash())){
                Toast.makeText(UploadActivity.this,"已经添加上传过了哦",Toast.LENGTH_SHORT).show();
                return;
            }
        }
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Toast.makeText(UploadActivity.this,"已添加至上传列表中",Toast.LENGTH_SHORT).show();
            }
        });
        Log.d("FileInformation",appInfo.getSize());
        Log.d("FileInformation",appInfo.getHash());
        UploadAsyncTask asyncTask = new UploadAsyncTask(appInfo,UploadActivity.this);
        asyncTask.execute("1");
        uploadingFragment.uploadingList.add(appInfo);          //将当前apk信息添加到上传详情列表中
    }

    @Override
    public boolean dispatchKeyEvent(KeyEvent event) {
        if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) {  //点击的是返回键
            if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0&&isSelecting) {
                cancel();
                return true;
            }
        }
        return super.dispatchKeyEvent(event);
    }

    //点击取消或返回键的处理逻辑
    private void cancel(){
        selectAll = false;
        selectAllCheckbox.setChecked(false);
        relativeLayout.setVisibility(View.GONE);
        uploadList.clear();
        for (AppInfo app : applist) {
            app.setChecked(false);
        }
        isClosing = true;
        adapter.notifyDataSetInvalidated();
        isSelecting = false;
    }

    //Applist适配器
    class AppAdapter extends BaseAdapter{

        private List<AppInfo> appInfoList = null;

        LayoutInflater infater = null;

        AppAdapter(Context context, List<AppInfo> apps) {
            infater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            appInfoList = apps;
        }

        @Override
        public int getCount() {
            System.out.println("size" + appInfoList.size());
            return appInfoList.size();
        }

        @Override
        public Object getItem(int position) {
            return appInfoList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            View view = null;
            ViewHolder holder = null;
            if (isClosing || convertView == null || convertView.getTag() == null) {
                view = infater.inflate(R.layout.select_upload,parent,false);
                holder = new ViewHolder(view);
                view.setTag(holder);
            }
            else{
                view = convertView;
                holder = (ViewHolder) convertView.getTag();
            }
            AppInfo appInfo = (AppInfo) getItem(position);
            holder.appIcon.setImageDrawable(appInfo.getAppIcon());
            holder.tvAppLabel.setText(appInfo.getAppLabel());
            holder.tvPkgName.setText(appInfo.getPkgName());
            holder.checkBox.setChecked(appInfo.isChecked());

            //如果当前checkbox为出现状态，就将其显示，否则不显示（加载时）
            if (isSelecting) {
                holder.checkBox.setVisibility(View.VISIBLE);
            } else {
                holder.checkBox.setVisibility(View.GONE);
            }
            if (selectAll)
                holder.checkBox.setChecked(true);
            if (choose > -1 && position == choose) {
                holder.checkBox.setChecked(true);
                choose = -1;
            }
            return view;
        }
    }

    class ViewHolder {
        ImageView appIcon;
        TextView tvAppLabel;
        TextView tvPkgName;
        CheckBox checkBox;

        private ViewHolder(View view) {
            this.appIcon = (ImageView) view.findViewById(R.id.imgApp);
            this.tvAppLabel = (TextView) view.findViewById(R.id.tvAppLabel);
            this.tvPkgName = (TextView) view.findViewById(R.id.tvPkgName);
            this.checkBox = (CheckBox) view.findViewById(R.id.item_checkbox);
        }

    }

    private void showProgressDialog(){
        if (progressDialog == null){
            progressDialog = new ProgressDialog(UploadActivity.this);
            progressDialog.setMessage("正在加载...");
            progressDialog.setCanceledOnTouchOutside(false);
        }
        progressDialog.show();
    }

    private void closeProgressDialog(){
        if (progressDialog != null){
            progressDialog.dismiss();
        }
    }
}
